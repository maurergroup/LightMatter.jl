"""
    athemdistribution_factory(sim::SimulationSettings,laser::Expr)
    This function takes the SimulationSettings struct and a laser expression and returns an assembled
    expression for how the AthEM non-equilibrium electrons should propagate.
"""
function athemdistribution_factory(sim::SimulationSettings,laser::Expr)
    feq = :(1 ./(exp.((mp.egrid.-μ)./(cons.kB*Tel)).+1))
    ftot = :($feq.+fneq)
    Elecelec = athem_electronelectroninteraction(sim)
    Elecphon = athem_electronphononinteraction(sim)
    athemexcite=:($laser*Lightmatter.athemexcitation($ftot,mp.egrid,DOS,las.hv))
    return build_athemdistribution(athemexcite,Elecelec,Elecphon)
end
"""
    build_athemdistribution(athemexcite::Expr,Elecelec::Expr,Elecphon::Expr)
    Takes 3 expressions for the excitaiton, electorn interaction and phonon interaction
    and returns a expr which is their broadcasted sum. All 3 compenents therefore need to be in
    a form where they can be summed e.g. negatives must be included in the original expression.
"""
function build_athemdistribution(athemexcite::Expr,Elecelec::Union{Expr,Real},Elecphon::Union{Expr,Real})
    args = (athemexcite,Elecelec,Elecphon,:f_cond)
    return foldl((a, b) -> :($a .+ $b), args)
end
"""
    athemexcitation(ftot::Vector{<:Real},egrid::Vector{<:Real},DOS::spl,hv::Real)
    Calculates the excitation of the non-equilibrium distribution at the current time
    step. Uses a Fermi's Golden Rule epxression to denote the change in the distribution for 
    the holes and electrons as well as ensures particle conservation between the two quasiparticles.
"""
function athemexcitation(ftot::Vector{<:Real},egrid::Vector{<:Real},DOS::spl,hv::Real)
    ftotspl = get_interpolate(egrid,ftot)
    Δfneqh = athem_holegeneration(egrid,DOS,ftotspl,hv)
    Δfneqe = athem_electrongeneration(egrid,DOS,ftotspl,hv)
    pc_sf = get_noparticles(Δfneqe,DOS,egrid) / get_noparticles(Δfneqh,DOS,egrid)
    Δfneqtot = (pc_sf*Δfneqe).-Δfneqh
    return Δfneqtot./get_internalenergy(Δfneqtot,DOS,egrid)
end
"""
    athem_holegeneration(egrid::Vector{<:Real},DOS::spl,ftotspl::spl,hv::Real)
    Calculates the distribution of holes generated by the excitation using a spline
    of the current total distribution (ftotspl) as f(E+hv) may not be a point on the discretized 
    energy grid.
"""
function athem_holegeneration(egrid::Vector{<:Real},DOS::spl,ftotspl::spl,hv::Real)
    return DOS(egrid.+hv).*ftotspl(egrid).*(1 .-ftotspl(egrid.+hv))
end
"""
    athem_electrongeneration(egrid::Vector{<:Real},DOS::spl,ftotspl::spl,hv::Real)
    Calculates the distribution of electrons generated by the excitation using a spline
    of the current total distribution (ftotspl) as f(E+hv) may not be a point on the discretized 
    energy grid.
"""
function athem_electrongeneration(egrid::Vector{<:Real},DOS::spl,ftotspl::spl,hv::Real)
    return DOS(egrid.-hv).*ftotspl(egrid.-hv).*(1 .-ftotspl(egrid))
end
"""
    athem_electronelectroninteraction(sim::SimulationSettings)
    Returns an expression for the hange in the non-equilibrium distribution due to the interaction with 
    thermal electrons. If none is requested then returns a 0.0. The keyword to be set in define_simulation_settings
    is elecelecint = true. The function assumes that there will be a phonon bath present so electemp must also equal true.
"""
function athem_electronelectroninteraction(sim::SimulationSettings)
    if sim.Interactions.ElectronElectron == true 
        return :(-1*relax_dis)
    else
        return 0.0
    end
end
"""
    athem_electronelectronscattering(Tel::Real,μ::Real,mp::MaterialParameters,fneq::Vector{Real},DOS::spl,n::Real)
    Calculates the change in fneq distribution to electron-electron scattering. This distribution is later referred to as 
    relax_dis. The method is via a modified relaxation time approximation where instead of -((fneq+feq)-frel)/τ we instead switch
    feq and frel to ensure that fneq relaxes to a fully 0 distribution. This is currently fixed to use a Fermi liquid relaxation
    time.
"""
function athem_electronelectronscattering(Tel::Real,μ::Real,mp::MaterialParameters,fneq::Vector{<:Real},DOS::spl,n::Real)
    feq = Lightmatter.FermiDirac(Tel,μ,cons.kB,mp.egrid)
    ftot = feq.+fneq
    τee = mp.τ*(μ.+mp.FE)^2 ./((mp.egrid.-μ).^2 .+(pi*cons.kB*Tel)^2)
    goal = extended_Bode(ftot.*DOS(mp.egrid).*mp.egrid,mp.egrid)
    frel = find_relaxeddistribution(mp.egrid,goal,n,DOS,cons.kB)
    return (fneq.+frel.-feq)./τee
end
"""
    find_relaxeddistribution(egrid::Vector{<:Real},goal::Real,n::Real,DOS::spl,kB::Real)
    This is the function that performs the root finding to find a Fermi distribution with the same internal energy
    as the goal (the internal energy of ftot). This then returns said Fermi distribution.
"""
function find_relaxeddistribution(egrid::Vector{<:Real},goal::Real,n::Real,DOS::spl,kB::Real)
    f(u) = goal - find_temperatureandμ(u,n,DOS,kB,egrid)
    Temp = solve(ZeroProblem(f,1000.0);abstol=1e-10,reltol=1e-10)
    μ = find_chemicalpotential(n,Temp,DOS,kB,egrid)
    return FermiDirac(Temp,μ,kB,egrid)
end
"""
    find_temperatureandμ(Tel::Real,n::Real,DOS::spl,kB::Real,egrid::Vector{<:Real})
    The function inside of the rootfinding problem which simply calculates the current μ from the temp suggested and returns
    the internal energy of the corresponding guess' Fermi distribution.
"""
function find_temperatureandμ(Tel::Real,n::Real,DOS::spl,kB::Real,egrid::Vector{<:Real})
    μ = find_chemicalpotential(n,Tel,DOS,kB,egrid)
    return get_internalenergy(FermiDirac(Tel,μ,kB,egrid),DOS,egrid)
end
"""
    athem_electronphononinteraction(sim::SimulationSettings)
    Provides the expression for the chosen non-equilibrium electron-phonon interaction. This uses a relaxation time approach
    again with a constant relaxation time provided in MaterialParameters. If none is requested then returns a 0.0. The keyword
    to be set in define_simulation_settings is elecphonint = true. The function assumes that there will be a phonon bath present 
    so phonontemp must also equal true.
"""
function athem_electronphononinteraction(sim::SimulationSettings)
    if sim.Interactions.ElectronPhonon == true 
        return :(-fneq./mp.τep)
    else
        return 0.0
    end
end
"""
    athem_electronparticlechange()
    Returns an expression for the change in number of particles due to relax_dis which simply calculates the number of
    particles inside of relax_dis.
"""
function athem_electronparticlechange()
    return :([Lightmatter.get_noparticles(relax_dis,DOS,mp.egrid)])
end
"""
    dFDdE(kB::Real,Tel::Real,μ::Real,E::Union{Vector{<:Real},Real})
    Returns the derivative of a Fermi distribution with respect to energy at the current energy
    point or across an energy window - given by whether E is a Real or Vector. 
"""
@inline function dFDdE(kB::Real,Tel::Real,μ::Real,E::Union{Vector{<:Real},Real})
    return -exp.((E.-μ)./(kB*Tel))./(kB*Tel*(exp.((E.-μ)./(kB*Tel)).+1).^2)
end
"""
    dFDdT(kB::Real,Tel::Real,μ::Real,E::Union{Vector{<:Real},Real})
    Returns the derivative of a Fermi distribution with respect to temperature at the current energy
    point or across an energy window - given by whether E is a Real or Vector. 
"""
@inline function dFDdT(kB::Real,Tel::Real,μ::Real,E::Union{Vector{<:Real},Real})
    return (E.-μ).*exp.((E.-μ)./(kB*Tel))./(kB*Tel^2*(exp.((E.-μ)./(kB*Tel)).+1).^2)
end
"""
    dFDdμ(kB::Real,Tel::Real,μ::Real,E::Union{Vector{<:Real},Real})
    Returns the derivative of a Fermi distribution with respect to chemical potential at the current energy
    point or across an energy window - given by whether E is a Real or Vector. 
"""
@inline function dFDdμ(kB::Real,Tel::Real,μ::Real,E::Union{Vector{<:Real},Real})
    return exp.((E.-μ)./(kB*Tel))./(kB*Tel*(exp.((E.-μ)./(kB*Tel)).+1).^2)
end
"""
    FermiDirac(Tel::Real,μ::Real,kB::Real,E::Union{Vector{<:Real},Real})
    Returns the Fermi distribution at the given temperature and chemical potential for either a single energy
    value or across an energy window - given by whether E is a Real or Vector.
"""
@inline FermiDirac(Tel::Real,μ::Real,kB::Real,E::Union{Vector{<:Real},Real}) = 1 ./(exp.((E.-μ)./(kB*Tel)).+1)

function electron_distribution_transport!(v_g,f,Δf,dim)
    for i in 2:size(f, 1)-1
        Δf[i,:] = ((f[i+1,:] .- f[i-1,:]) ./ (2*dim.dz)).*v_g
    end
    Δf[1,:] = ((f[2,:] .- f[1,:]) ./ dim.dz).*v_g
    Δf[end,:] = ((f[end,:] .- f[end-1,:]) ./ dim.dz).*v_g
end

function electron_distribution_transport!(v_g,f,Δf,dim::Homogeneous)
    nothing
end