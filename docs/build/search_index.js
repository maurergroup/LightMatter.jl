var documenterSearchIndex = {"docs":
[{"location":"RunningSimulations/#User-Interface","page":"Running Simulations","title":"User Interface","text":"","category":"section"},{"location":"RunningSimulations/","page":"Running Simulations","title":"Running Simulations","text":"This page contains all relevant docstrings for users to run a simulation.","category":"page"},{"location":"RunningSimulations/#LightMatter.run_simulation","page":"Running Simulations","title":"LightMatter.run_simulation","text":"run_simulation(sys::Dict{String,Union{Expr,Vector{Expr}}}, initialtemps::Dict{String, Float64},\ntspan::Tuple{Float64,Float64}, sim::Simulation; \nsave, tolerance, max_step, min_step, callbacks)\n\nGenerates the problem the dynamics will solve and then solves the coupled system of ODE's.\nCurrently always uses Tsit5 for the integration routine but in the future that may be user-defined\n\n# Arguments\n- 'sys': Dictionary of ODE equations to be propagated\n- 'initialtemps': Dictionary of initial temperatures of the bath\n- 'tspan': Tuple of values for the dynamics to run between (the laser is centred on 0.0)\n- 'sim': Simulation settings and parameters\n\n# KWARGS\n- Any key-word arguemnts from DiffEq that work with ODEProblems can be including in a namedtuple here\n\n# Returns\n- The solution of the dynamics calculation\n\n\n\n\n\n","category":"function"},{"location":"RunningSimulations/#LightMatter.post_production","page":"Running Simulations","title":"LightMatter.post_production","text":"post_production(sol,file_name::String,initial_temps::Dict{String,Float64},output::Symbol,sim::Simulation)\n\nHandles processing, saving the simulation after it has completed. Uses HDF5 file format\nCurrently the only output setting supported is :minimum which only saves the parameters, chemical potential and\nprogated systems\n\n# Arguments\n- 'sol': The solution of the simulation\n- 'file_name': The name the user wishes the file to be saved as \n- 'initial_temps': Initial temperature the baths have been set to\n- 'output': The output method required - may change in future\n- 'sim': Simulation settings and parameters\n\n# Returns\n- Nothing is returned but a file is created\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#User-Interface","page":"Constructing Simulations","title":"User Interface","text":"","category":"section"},{"location":"ConstructingSimulations/","page":"Constructing Simulations","title":"Constructing Simulations","text":"This page contains all relevant docstrings for users to construct simulations.","category":"page"},{"location":"ConstructingSimulations/#LightMatter.build_Simulation","page":"Constructing Simulations","title":"LightMatter.build_Simulation","text":"build_Simulation(;densitymatrix::Union{DensityMatrix,NamedTuple,Nothing}=nothing, electronictemperature::Union{ElectronicTemperature,NamedTuple,Nothing}=nothing,\n                       phononictemperature::Union{PhononicTemperature,NamedTuple,Nothing}=nothing, athermalelectrons::Union{AthermalElectrons,NamedTuple,Nothing}=nothing,\n                       electronicdistribution::Union{ElectronicDistribution,NamedTuple,Nothing}=nothing, phononicdistribution::Union{PhononicDistribution,NamedTuple,Nothing}=nothing,\n                       structure::Union{Structure,NamedTuple,Nothing}=nothing, laser::Union{Laser,NamedTuple,Nothing}=nothing)\n\nAssembles the full Simulation struct from the requested components. Any systems not provided to the function are disabled by default.\nThe user can send either a completed Struct of the correct type or a NamedTuple with the correct key-word arguments to assemble the struct directly within the function\nusing the representative build_x function where x is the subsystem.\n\n# Arguments\n- 'densitymatrix': The DensityMatrix subsystem\n- 'electronictemperature': The ElectronicTemperature subsystem\n- 'phononictemperature': The PhononicTemperature subsystem\n- 'athermalelectrons': The AthermalElectrons subsystem\n- 'electronicdistribution': The ElectronicDistribution subsystem\n- 'phononicdistribution': The PhononicDistribution subsystem\n- 'structure': The Structure subsystem\n- 'laser': The Laser subsystem\n\n# Returns\n- The PhononicTemperature struct with the users settings and parameters with any neccessary unit conversion.\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_Laser","page":"Constructing Simulations","title":"LightMatter.build_Laser","text":"build_laser(;envelope=:Gaussian, FWHM=10.0, ϕ=10.0, hv=5.0, Transport=:optical, ϵ=1.0, R=0.0, δb=1.0)\n\nOuter constructor function to assemble the Laser struct. Can handle unit conversions if the user provides a \nunitful quantity to the laser. \nDefaults allow any unneccessary parameters for users simulation to be ignored.\n\n# Arguments\n- 'envelope': Symbol representing the shape of the envelope, :Gaussian, :HyperbolicSecant, :Lorentzian, :Rectangular\n- 'FWHM': unit = fs:  Full-Width Half-Maximum of the laser pulse or half the duration of the Rectangular laser ± 0.0\n- 'ϕ': unit = eV/nm²: The fluence of the laser \n- 'hv': unit = eV: The photon energy of the laser\n- 'Transport': The method of spatial transport of the laser, :optical, :ballistic, :combined\n- 'ϵ': unit = nm: The penetration depth of the material (1/α), for the :Optical & :Combined transport\n- 'R': unit = unitless:The reflectivity of the sample surface, leave at 0.0 if your provided fluence is the absorbed fluence\n- 'δb': unit = nm:The ballistic length of electrons, for :ballistic & :combined transport\n\n# Returns\n- The Laser struct with the user settings and neccessary values converted to the correct units\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_Dimension","page":"Constructing Simulations","title":"LightMatter.build_Dimension","text":"build_Dimension(grid=[0.0]::AbstractArray{Float64}, cutoff=0.0::Union{Vector{Float64},Float64})\n\nOuter constructor function to assemble the Dimension struct. The user provides an evenly spaced grid \nand sorted list of interface heights for antenna-reactor complexes. The user must ensure the length of \ncutoff = Elemental_System - 1. No unit conversion is performed when assembling this struct.\nDefaults allow any unneccessary parameters for users simulation to be ignored.\n\n# Arguments\n- 'grid': unit = nm: Vector representing spatial grid. If [0.0] then homogenous (0D) calculation is performed\n- 'cutoff': unit = nm:  Sorted list of all interface heights. Only used when Elemental_System > 1. \n\n# Returns\n- The Dimension struct with the users grid and interface heights\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_Structure","page":"Constructing Simulations","title":"LightMatter.build_Structure","text":"build_Structure(; las::Laser=build_Laser(), Spatial_DOS::Bool = false, Elemental_System::Int = 1, dimension::Dimension = build_Dimension(),\n                bulk_DOS::Union{String,Vector{String},Nothing} = nothing, DOS_folder::Union{String,Vector{String},Nothing} = nothing, \n                bulk_geometry::Union{String,Vector{String},Nothing} = nothing, slab_geometry::Union{String,Vector{String},Nothing} = nothing, \n                atomic_layer_tolerance::Union{Float64,Vector{Float64}} = 0.1, DOS::Union{spl,Vector{spl},Nothing} = nothing, \n                egrid::Union{Vector{Float64},Nothing} = nothing)\n\nOuter constructor function to assemble the Structure struct. No unit conversion is performed.\nAll DOS files must be in the format |energy (eV), states (eV⁻¹Vᵤ⁻¹)|. Comment lines (#) are ignored\nDefaults allow any unneccessary parameters for users simulation to be ignored.\n\n# Arguments\n- 'las': Laser struct, provide if not providing a pre-made energy grid\n- 'Spatial_DOS': Bool for determening whether the DOS is spatially resolved or bulk\n- 'Elemental_System': Float64 of different crystal systems in the structure\n- 'dimension': Dimension struct, provide if not wanting a 0D calculation\n- 'bulk_DOS': File location of the bulk DOS file\n- 'DOS_folder': Location of a folder containing atom projected DOS. These must be in units of (eV⁻¹atom⁻¹) and be .dat files\n- 'bulk_geometry': File location of the bulk DOS' geometry.in file\n- 'slab_geometry': File location of the geometry.in to create the atom projected DOS' found in DOS_folder\n- 'atomic_layer_tolerance': Minimum height spacing in Å for two atoms to be apart to be considered different layers\n- 'DOS': A user made DOS or vector of DOS' for the simulation if not wanting to use the DOS_initialization function. Will overwrite this function.\n         Must be of the type DataInterpolations.LinearInterpolation or a vector of them. It is advised to have extrapolation enabled just in case. \n- 'egrid': A user made energy grid if not wanting to use build_egrid function. Will overwrite this function. Must be an evenly spaced grid that\n           has length(egrid) % 4 == 1 for the numerical integration algorithm to work. \n- 'BandStructure': Contains splines of [k->E, E->k] for the evaluation of magnetotransport and group velocity\n\n# Returns\n- The Structure struct with the DOS and egrid assembled or provided by the user\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_AthermalElectrons","page":"Constructing Simulations","title":"LightMatter.build_AthermalElectrons","text":"build_AthermalElectrons(;structure::Structure, Enabled = false, AthermalElectron_ElectronCoupling = false, \n                        AthermalElectron_PhononCoupling = false, Conductivity = false, ElectronicRelaxation = :FLT, \n                        PhononicRelaxation = :constant, ExcitationMatrixElements = :unity, FE=0.0, τ=1.0, τep = 1000.0, \n                        v_g = nothing, Conductive_Velocity = :constant, EmbeddedAthEM = false)\n\nOuter constructor function to assemble the AthermalElectrons struct. Unit conversion is detected on all parameters.\nThe function will build the group veolcity if one isn't provided by the user.\nDefaults allow any unneccessary parameters for users simulation to be ignored.\n\n# Arguments\n- 'Enabled': Bool for enabling an athermal electron subssystem\n- 'structure': Structure struct, provide if you want the group velocity calculated for you\n- 'AthermalElectron_ElectronCoupling': Enables athermal electron - thermal electron coupling\n- 'AthermalElectron_PhononCoupling': Enables athermal electron - thermal phonon coupling\n- 'Conductivity': Bool for enabling athermal electron ballistic transport\n- 'ElectronicRelaxation': Method for calculating athermal electron lifetime due to e-e collisions, :FLT or :constant\n- 'PhononicRelaxation': Method for calculating athermal electron lifetime due to e-p collisions, :quasi or :constant\n- 'ExcitationMatrixElements': Decides method to calculate excitation matrix elements, only :unity is currently implemented\n- 'FE': unit = eV: The Fermi energy defined as the difference between the bottom of the valence band in the DOS and 0.0\n- 'τ': unit = fs: A material dependent scalar for the :FLT lifetime or the constant value for :constant e-e lifetime\n- 'τep': unit = fs: The constant lifetime for the athermal electrons due to electron-phonon coupling\n- 'v_g': unit = nm/fs: The group velocity of the ballistic electrons, for the user to define their own group velocity and will overwrite the \n         one calculated by build_group_velocity. Also the value used for a constant velocity.\n- 'Conductive_Velocity': Define the group velocity that build_group_velocity should use, :constant :fermigas, :effectiveoneband\n- 'EmbeddedAthEM': Bool for setting only the surface layer to AthEM and the rest a TTM. Can't be used alongside athermal electron\n                   transport\n\n# Returns\n- The AthermalElectrons struct with the users settings and parameters with any neccessary unit conversion.\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_ElectronicTemperature","page":"Constructing Simulations","title":"LightMatter.build_ElectronicTemperature","text":"build_ElectronicTemperature(; Enabled = false, AthermalElectron_ElectronCoupling = false, Electron_PhononCoupling = false, Conductivity = false,\n                           ElectronicHeatCapacity = :linear, ElectronPhononCouplingValue = :constant, γ = 1.0, κ = 1.0, λ = 1.0, ω = 1.0, g = 1.0)\n\nOuter constructor function to assemble the ElectronicTemperature struct. Unit conversion is detected on all parameters.\nDefaults allow any unneccessary parameters for users simulation to be ignored.\n\n# Arguments\n- 'Enabled': Bool for enabling an thermal electronic bath\n- 'AthermalElectron_ElectronCoupling': Enables athermal electron - thermal electron coupling\n- 'Electron_PhononCoupling': Enables electron bath - phonon bath coupling\n- 'Conductivity': Bool for enabling thermnal electron diffusive transport\n- 'ElectronicHeatCapacity': Method for calculating the electronic heat capacity, :linear or :nonlinear\n- 'ElectronPhononCouplingValue': Method for calculating the electron phonon coupling value, either :constant or :variable\n- 'γ': unit = eV/nm³/K²: Specific heat capacity of electronic bath for :linear ElectronicHeatCapacity\n- 'κ': unit = eV/fs/nm/K: Thermal conductivity of electrons at room temperature\n- 'λ': unit = unitless: Electron-phonon mass enhancement parameter\n- 'ω': unit = eV^2: The second moment of the phonon spectrum\n- 'g': unit = eV/fs/nm³/K: Constant value for the electron-phonon coupling if using :constant\n\n# Returns\n- The ElectronicTemperature struct with the users settings and parameters with any neccessary unit conversion.\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_ElectronicDistribution","page":"Constructing Simulations","title":"LightMatter.build_ElectronicDistribution","text":"build_ElectronicDistribution(;Enabled = false, Electron_PhononCoupling = false, Ω=1.0, me = Constants.me)\n\nBoltzmann clacluations are currently WIP.\nOuter constructor function to assemble the ElectronicDistribution struct. Unit conversion is detected on all parameters.\nDefaults allow any unneccessary parameters for users simulation to be ignored. Recommended to use Unitful Quantity\nfor me due to the unusual mass units in LightMatter.jl\n\n# Arguments\n- 'Enabled': Bool for enabling the full electronic distriubtion propagation\n- 'Electron_PhononCoupling': Enables electronic distribution - phononic distribution bath coupling\n- 'me': unit = eVm : Mass of conduction electron in LightMatter.jl mass units\n\n# Returns\n- The ElectronicDistribution struct with the users settings and parameters with any neccessary unit conversion.\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_PhononicTemperature","page":"Constructing Simulations","title":"LightMatter.build_PhononicTemperature","text":"build_PhononicTemperature(;Enabled = false, AthermalElectron_PhononCoupling = false, Electron_PhononCoupling = false, \n                           Conductivity = false, PhononicHeatCapacity = :linear, θ = 1.0, n = 1.0, Cph = 1.0, κ = 1.0)\n\nOuter constructor function to assemble the PhononicTemperature struct. Unit conversion is detected on all parameters.\nDefaults allow any unneccessary parameters for users simulation to be ignored.\n\n# Arguments\n- 'Enabled': Bool for enabling an thermal electronic bath\n- 'AthermalElectron_PhononCoupling': Enables athermal electron - thermal electron coupling\n- 'Electron_PhononCoupling': Enables electron bath - phonon bath coupling\n- 'Conductivity': Bool for enabling thermal phonon diffusive transport\n- 'PhononicHeatCapacity': Method for calculating the phononic heat capacity, :constant or :nonlinear\n- 'θ': unit = K: Debye temperature of the material\n- 'n': unit = atoms/nm³: Float64 of atoms per nm³\n- 'Cph': unit = eV/nm³/K: Constant heat capacity for :constant\n- 'κ': unit = eV/nm: Constant thermal conductivity of phonons\n\n# Returns\n- The PhononicTemperature struct with the users settings and parameters with any neccessary unit conversion.\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_PhononicDistribution","page":"Constructing Simulations","title":"LightMatter.build_PhononicDistribution","text":"build_PhononicDistribution(;Enabled = false, Electron_PhononCoupling = false, Ω=1.0, me = Constants.me)\n\nBoltzmann clacluations are currently WIP.\nOuter constructor function to assemble the PhononicDistribution struct. Unit conversion is detected on all parameters.\nDefaults allow any unneccessary parameters for users simulation to be ignored. Recommended to use Unitful Quantity\nfor me due to the unusual mass units in LightMatter.jl\n\n# Arguments\n- 'Enabled': Bool for enabling the full phononic distriubtion propagation\n- 'Electron_PhononCoupling': Enables electronic distribution - phononic distribution bath coupling\n- 'cs': unit = nm/fs : Speed of sound of longitudinal mode\n= 'ED': unit = eV : Deybe energy of the material\n\n# Returns\n- The PhononicDistribution struct with the users settings and parameters with any neccessary unit conversion.\n\n\n\n\n\n","category":"function"},{"location":"ConstructingSimulations/#LightMatter.build_DensityMatrix","page":"Constructing Simulations","title":"LightMatter.build_DensityMatrix","text":"WIP!!!\nbuild_DensityMatrix(; Enabled = false)\n\nOnce implemented will build a density matrix and store Hamiltonian for propagation via the vonNeumann equation.\n\n\n\n\n\n","category":"function"},{"location":"#LightMatter","page":"Home","title":"LightMatter","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for LightMatter.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LightMatter is a Julia package for [brief description of what it does].","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Constructing Simulations\nRunning Simulations\nUnits","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"```julia using Pkg Pkg.add(\"LightMatter\")","category":"page"},{"location":"Units/#User-Interface","page":"Units","title":"User Interface","text":"","category":"section"},{"location":"Units/","page":"Units","title":"Units","text":"This page contains information on the units of the simulations.","category":"page"},{"location":"Units/#LightMatter.Constants","page":"Units","title":"LightMatter.Constants","text":"Constants = (ħ = 0.6582 eVfs, kB = 8.617e-5 eV/K, me = 5.686 eVm)\n\nGlobal named tuple for accessing constant physical values during a Simulation\n\n\n\n\n\n","category":"constant"},{"location":"Units/#LightMatter.BaseUnits","page":"Units","title":"LightMatter.BaseUnits","text":"BaseUnits = \n\nGlobal Tuple for conversion factors from base SI units to base LightMatter units\n\n\n\n\n\n","category":"constant"}]
}
